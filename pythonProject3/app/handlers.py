import app.keyboards as kb


from aiogram.utils import markdown
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart


from app.database.requests import set_user
from app.database.requests import get_item_by_id



router = Router()



@router.message(CommandStart())
@router.callback_query(F.data == 'to_main')
async def cmd_start(message: Message | CallbackQuery):
    url = ''
    if isinstance(message, Message):
        await message.delete()
        await set_user(message.from_user.id)
        await message.answer(f'{markdown.hide_link(url)}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SHOP MORTALA</b>\n\n<b>–£ –Ω–∞—Å —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã</b>\n<b>–ò –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–≥—Ä –Ω–∞ –≤—ã–±–æ—Ä</b>\n\n<b>–ù–∞–∂–∏–º–∞–π –∏ –ø–æ–∫—É–ø–∞–π</b>',
                         reply_markup=kb.main)
    else:
        await message.message.answer(f'{markdown.hide_link(url)}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SHOP MORTALA</b>\n<b>–£ –Ω–∞—Å —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã</b>\n<b>–ò –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–≥—Ä –Ω–∞ –≤—ã–±–æ—Ä</b>',
                                        reply_markup=kb.main)






@router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f'id: {message.photo[-1].file_id}')

@router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery):
    await callback.message.edit_text(f'Ô∏é–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞, <b>{callback.from_user.full_name}</b>Ô∏éÔ∏éÔ∏é',
    reply_markup=await kb.categories())



@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏')
    await callback.message.edit_text(text='Ô∏éüëá<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</b>Ô∏éüëá',
                                  reply_markup=await kb.items(callback.data.split('_')[1]))


# @router.callback_query(F.data.startswith('item_'))
# async def category(callback: CallbackQuery):
#     item = await get_item_by_id(callback.data.split('_')[1])
#     await callback.answer('üî•–í—ã –≤—ã–±—Ä–∞–ª–∏üî•')
#     await callback.message.answer_photo(photo=item.photo, caption=f'{item.name}\n{item.price}\n\n{item.description}',
#     reply_markup=kb.to_main)


@router.callback_query(F.data.startswith('item_'))
async def category(callback: CallbackQuery):
    item = await get_item_by_id(callback.data.split('_')[1])
    await callback.answer('')
    await callback.message.answer_photo(photo=item.photo, caption=f'<b>{item.name}</b>\n–¶–µ–Ω–∞: üí≤<b>{item.description}</b>üí≤\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤–ª–∞–¥–µ–ª—å—Ü—É: @zxc11095\n–ê—Ä—Ç–∏–∫—É–ª: <b>{item.price}</b>',
                                     reply_markup=kb.to_main)



# @router.callback_query(F.data == 'vladelec')
# async def vladelec(callback: CallbackQuery):
#     await callback.answer('')
#     await callback.message.edit_text(
#         f'Ô∏é<b>–£ –Ω–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü</b>\n\n<b>–ü–æ —Ä–µ–∫–ª–∞–º–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∫ –Ω–µ–º—É</b>\n\n@zxc11095',
#                                   reply_markup=kb.to_main)


@router.callback_query(F.data.startswith('vladelec'))
async def vladelec(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(text=f'Ô∏é<b>–£ –Ω–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü</b>'
                                       f'\n\n<b>–ü–æ —Ä–µ–∫–ª–∞–º–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∫ –Ω–µ–º—É</b>\n\n->->->@zxc11095',
                                  reply_markup=kb.to_main)



@router.callback_query(F.data == 'otz')
async def otz(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('<b>–û—Ç–∑—ã–≤—ã –∑–¥–µ—Å—å:</b>\n\n@OtzivyIMMORTAL',
                                  reply_markup=kb.to_main)

@router.message(F.text)
async def tetx(message: Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SHOP MORTALA</b>',
                         reply_markup=kb.main)




